#!/bin/bash -eu

function usage
{
	cat <<END
Usage: $0 [-c CPU_REQUEST] [-C CPU_LIMIT] [-m MEMORY_REQUEST] [-M MEMORY_LIMIT] [-v VOLUME] [-i IMAGE] [-e ENV=VAL] [ -l LOGDIR ] [ -n POD_NAME ] [ -w WORKDIR ] [ -p POD_PREFIX ] [ -s SECRET ] [ -a ANNOTATION=VAL ] COMMAND
Options:
	-c CPU_REQUEST		The kubernetes CPU request. Default: 900m (90% of one core, to
				allow some room for omnipresent tiny kube services)
	-C CPU_LIMIT		The kubernetes CPU limit. Default: 1000m (100% of one core, to
				cap the resources consumed by the pod at one core)
	-m MEMORY_REQUEST	The kubernetes memory request. Default: 2Gi (2048 megabytes)
	-M MEMORY_LIMIT		The kubernetes memory limit. Default: 4Gi (4096 megabytes)
	-N 			Don't mount an NFS share in /shared.
	-i IMAGE		The Docker image to pull.
	-e ENV=VAL		An environment variable that needs to be set.
				Will be updated to accomodate multiple variables.
	-l LOGDIR		A directory to check for completion logs of pods. If a log is found
				for a pod, the pod will not be created. Eases re-running missing
				parts of large experiments.
	-n POD_NAME		The name of the pod. If not provided, this will be automatically
				generated from the given command.
	-w WORKDIR		A temporary directory to create the yml files describing the pods.
				If not specified, /tmp/workbench will be used.
	-p POD_PREFIX		A string to prefix the pod names. Makes mass-scheduling different
				parts of an experiment easier.
	-s SECRET		Set this variable if pulling image from a private registry
	-a ANNOTATION=VAL	Any annotation that needs to be set for this pod.
				Can be used to identify
	COMMAND			The command to run in the dockerfile.

All options can also be specified via environment variables (i.e.: POD_PREFIX=mypods ./pod_create echo hello).
END
}

LOGDIR=${LOGDIR-}
NFS=${NFS-}
IMAGE=${IMAGE-ubuntu}
ENV_ARRAY=()
CPU_REQUEST=${CPU_REQUEST:-900m}
CPU_LIMIT=${CPU_LIMIT:-1000m}
MEMORY_REQUEST=${MEMORY_REQUEST:-2Gi}
MEMORY_LIMIT=${MEMORY_LIMIT:-4Gi}
POD_NAME=${POD_NAME-}
POD_PREFIX=${POD_PREFIX-}
SECRET=${SECRET-}
WORKDIR=${WORKDIR-}
NONFS=${NONFS:-0}
ANN_NAME=${ANN_NAME-}
ANN_VAL=${ANN_VAL-}

while getopts "c:C:m:M:l:n:i:e:a:s:w:p:N" OPT
do
	case $OPT in
		c)
			CPU_REQUEST=$OPTARG
			;;
		C)
			CPU_LIMIT=$OPTARG
			;;
		m)
			MEMORY_REQUEST=$OPTARG
			;;
		M)
			MEMORY_LIMIT=$OPTARG
			;;
		i)
			IMAGE=$OPTARG
			;;
		e)
			ENV_ARRAY+=($OPTARG)
			;;
		l)
			LOGDIR=$OPTARG
			;;
		N)
			NONFS=1
			;;
		n)
			POD_NAME=$OPTARG
			;;
		p)
			POD_PREFIX=$OPTARG
			;;
		w)
			WORKDIR=$OPTARG
			;;
		s)
			SECRET=$OPTARG
			;;
		a)
			IFS='=' read ANN_NAME ANN_VAL <<< $OPTARG
			;;
		*)
			usage
			exit 0
			;;
	esac
done

WORKDIR=${WORKDIR:-/tmp/workbench}
mkdir -p $WORKDIR

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
shift $(($OPTIND-1))
POD_CMD="$@"

POD_NAME=${POD_NAME:-$POD_CMD}
POD_NAME=${POD_NAME:-$POD_CMD}
[ -n "$POD_PREFIX" ] && POD_NAME=$POD_PREFIX-$POD_NAME
POD_NAME_COPY=$POD_NAME
POD_NAME=$(echo $POD_NAME | $SCRIPT_DIR/kubesanitize)


if [ -n "$LOGDIR" -a -f $LOGDIR/$POD_NAME.log ]
then
	echo "[*] Skipping $POD_NAME creation because the completion log is already there."
	exit
fi

mkdir -p $WORKDIR/pods
PODPATH=$WORKDIR/pods/$POD_NAME.yml

cat <<END >$PODPATH
apiVersion: v1
kind: Pod
metadata:
  name: $POD_NAME
END
if [ -n "$ANN_NAME" ]
then
	cat <<END >>$PODPATH
  annotations:
    $ANN_NAME: "$ANN_VAL"
END
fi
cat <<END >>$PODPATH
spec:
  containers:
    - name: $POD_NAME
      image: $IMAGE
      imagePullPolicy: Always
      securityContext:
        privileged: true
END

if [ -n "$POD_CMD" ]
then
	cat <<END >>$PODPATH
      command: ["$POD_CMD"]
END
fi

if [ ${#ENV_ARRAY[@]} -ge 1 ]
then
	cat <<END >>$PODPATH
      env:
END
	for item in ${ENV_ARRAY[@]}
	do
		IFS='=' read -r ENV_NAME ENV_VAL <<< "$item"
		cat <<END >>$PODPATH
        - name: $ENV_NAME
          value: "$ENV_VAL"
END
	done
fi

cat <<END >>$PODPATH
      stdin: true
      tty: true
      volumeMounts:
        - name: shared
          mountPath: "/shared"
      resources:
        limits:
          cpu: $CPU_LIMIT
          memory: $MEMORY_LIMIT
        requests:
          cpu: $CPU_REQUEST
          memory: $MEMORY_REQUEST
END

if [ -n "$SECRET" ]
then
	cat <<END >>$PODPATH
  imagePullSecrets:
  - name: $SECRET
END
fi

cat <<END >>$PODPATH
  restartPolicy: Never
  volumes:
  - name: shared
END

if [ "$NONFS" -ne 1 ]
then
	cat <<END >>$PODPATH
    persistentVolumeClaim:
      claimName: nfs
END
else
	cat <<END >>$PODPATH
    emptyDir: {}
END
fi

sed -i 's/\r"/"/g' $PODPATH
kubectl create -f $PODPATH
